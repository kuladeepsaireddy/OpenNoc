/*
 * These source files contain a hardware description of a network
 * automatically generated by CONNECT (CONfigurable NEtwork Creation Tool).
 *
 * This product includes a hardware design developed by Carnegie Mellon
 * University.
 *
 * Copyright (c) 2012 by Michael K. Papamichael, Carnegie Mellon University
 *
 * For more information, see the CONNECT project website at:
 *   http://www.ece.cmu.edu/~mpapamic/connect
 *
 * This design is provided for internal, non-commercial research use only, 
 * cannot be used for, or in support of, goods or services, and is not for
 * redistribution, with or without modifications.
 * 
 * You may not use the name "Carnegie Mellon University" or derivations
 * thereof to endorse or promote products derived from this software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT OR OTHERWISE).
 *
 */


//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Sun Jun 10 13:12:37 EDT 2018
//
// Method conflict info:
// Method: in_ports_0_putRoutedFlit
// Conflict-free: in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       in_ports_3_putRoutedFlit,
// 	       in_ports_3_getNonFullVCs,
// 	       out_ports_0_getFlit,
// 	       out_ports_0_putNonFullVCs,
// 	       out_ports_1_getFlit,
// 	       out_ports_1_putNonFullVCs,
// 	       out_ports_2_getFlit,
// 	       out_ports_2_putNonFullVCs,
// 	       out_ports_3_getFlit,
// 	       out_ports_3_putNonFullVCs
// Conflicts: in_ports_0_putRoutedFlit
//
// Method: in_ports_0_getNonFullVCs
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       in_ports_3_putRoutedFlit,
// 	       in_ports_3_getNonFullVCs,
// 	       out_ports_0_getFlit,
// 	       out_ports_0_putNonFullVCs,
// 	       out_ports_1_getFlit,
// 	       out_ports_1_putNonFullVCs,
// 	       out_ports_2_getFlit,
// 	       out_ports_2_putNonFullVCs,
// 	       out_ports_3_getFlit,
// 	       out_ports_3_putNonFullVCs
//
// Method: in_ports_1_putRoutedFlit
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       in_ports_3_putRoutedFlit,
// 	       in_ports_3_getNonFullVCs,
// 	       out_ports_0_getFlit,
// 	       out_ports_0_putNonFullVCs,
// 	       out_ports_1_getFlit,
// 	       out_ports_1_putNonFullVCs,
// 	       out_ports_2_getFlit,
// 	       out_ports_2_putNonFullVCs,
// 	       out_ports_3_getFlit,
// 	       out_ports_3_putNonFullVCs
// Conflicts: in_ports_1_putRoutedFlit
//
// Method: in_ports_1_getNonFullVCs
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       in_ports_3_putRoutedFlit,
// 	       in_ports_3_getNonFullVCs,
// 	       out_ports_0_getFlit,
// 	       out_ports_0_putNonFullVCs,
// 	       out_ports_1_getFlit,
// 	       out_ports_1_putNonFullVCs,
// 	       out_ports_2_getFlit,
// 	       out_ports_2_putNonFullVCs,
// 	       out_ports_3_getFlit,
// 	       out_ports_3_putNonFullVCs
//
// Method: in_ports_2_putRoutedFlit
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_getNonFullVCs,
// 	       in_ports_3_putRoutedFlit,
// 	       in_ports_3_getNonFullVCs,
// 	       out_ports_0_getFlit,
// 	       out_ports_0_putNonFullVCs,
// 	       out_ports_1_getFlit,
// 	       out_ports_1_putNonFullVCs,
// 	       out_ports_2_getFlit,
// 	       out_ports_2_putNonFullVCs,
// 	       out_ports_3_getFlit,
// 	       out_ports_3_putNonFullVCs
// Conflicts: in_ports_2_putRoutedFlit
//
// Method: in_ports_2_getNonFullVCs
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       in_ports_3_putRoutedFlit,
// 	       in_ports_3_getNonFullVCs,
// 	       out_ports_0_getFlit,
// 	       out_ports_0_putNonFullVCs,
// 	       out_ports_1_getFlit,
// 	       out_ports_1_putNonFullVCs,
// 	       out_ports_2_getFlit,
// 	       out_ports_2_putNonFullVCs,
// 	       out_ports_3_getFlit,
// 	       out_ports_3_putNonFullVCs
//
// Method: in_ports_3_putRoutedFlit
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       in_ports_3_getNonFullVCs,
// 	       out_ports_0_getFlit,
// 	       out_ports_0_putNonFullVCs,
// 	       out_ports_1_getFlit,
// 	       out_ports_1_putNonFullVCs,
// 	       out_ports_2_getFlit,
// 	       out_ports_2_putNonFullVCs,
// 	       out_ports_3_getFlit,
// 	       out_ports_3_putNonFullVCs
// Conflicts: in_ports_3_putRoutedFlit
//
// Method: in_ports_3_getNonFullVCs
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       in_ports_3_putRoutedFlit,
// 	       in_ports_3_getNonFullVCs,
// 	       out_ports_0_getFlit,
// 	       out_ports_0_putNonFullVCs,
// 	       out_ports_1_getFlit,
// 	       out_ports_1_putNonFullVCs,
// 	       out_ports_2_getFlit,
// 	       out_ports_2_putNonFullVCs,
// 	       out_ports_3_getFlit,
// 	       out_ports_3_putNonFullVCs
//
// Method: out_ports_0_getFlit
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       in_ports_3_putRoutedFlit,
// 	       in_ports_3_getNonFullVCs,
// 	       out_ports_0_getFlit,
// 	       out_ports_1_getFlit,
// 	       out_ports_2_getFlit,
// 	       out_ports_3_getFlit
// Sequenced after (restricted): out_ports_0_putNonFullVCs,
// 			      out_ports_1_putNonFullVCs,
// 			      out_ports_2_putNonFullVCs,
// 			      out_ports_3_putNonFullVCs
//
// Method: out_ports_0_putNonFullVCs
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       in_ports_3_putRoutedFlit,
// 	       in_ports_3_getNonFullVCs,
// 	       out_ports_1_putNonFullVCs,
// 	       out_ports_2_putNonFullVCs,
// 	       out_ports_3_putNonFullVCs
// Sequenced before (restricted): out_ports_0_getFlit,
// 			       out_ports_1_getFlit,
// 			       out_ports_2_getFlit,
// 			       out_ports_3_getFlit
// Conflicts: out_ports_0_putNonFullVCs
//
// Method: out_ports_1_getFlit
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       in_ports_3_putRoutedFlit,
// 	       in_ports_3_getNonFullVCs,
// 	       out_ports_0_getFlit,
// 	       out_ports_1_getFlit,
// 	       out_ports_2_getFlit,
// 	       out_ports_3_getFlit
// Sequenced after (restricted): out_ports_0_putNonFullVCs,
// 			      out_ports_1_putNonFullVCs,
// 			      out_ports_2_putNonFullVCs,
// 			      out_ports_3_putNonFullVCs
//
// Method: out_ports_1_putNonFullVCs
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       in_ports_3_putRoutedFlit,
// 	       in_ports_3_getNonFullVCs,
// 	       out_ports_0_putNonFullVCs,
// 	       out_ports_2_putNonFullVCs,
// 	       out_ports_3_putNonFullVCs
// Sequenced before (restricted): out_ports_0_getFlit,
// 			       out_ports_1_getFlit,
// 			       out_ports_2_getFlit,
// 			       out_ports_3_getFlit
// Conflicts: out_ports_1_putNonFullVCs
//
// Method: out_ports_2_getFlit
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       in_ports_3_putRoutedFlit,
// 	       in_ports_3_getNonFullVCs,
// 	       out_ports_0_getFlit,
// 	       out_ports_1_getFlit,
// 	       out_ports_2_getFlit,
// 	       out_ports_3_getFlit
// Sequenced after (restricted): out_ports_0_putNonFullVCs,
// 			      out_ports_1_putNonFullVCs,
// 			      out_ports_2_putNonFullVCs,
// 			      out_ports_3_putNonFullVCs
//
// Method: out_ports_2_putNonFullVCs
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       in_ports_3_putRoutedFlit,
// 	       in_ports_3_getNonFullVCs,
// 	       out_ports_0_putNonFullVCs,
// 	       out_ports_1_putNonFullVCs,
// 	       out_ports_3_putNonFullVCs
// Sequenced before (restricted): out_ports_0_getFlit,
// 			       out_ports_1_getFlit,
// 			       out_ports_2_getFlit,
// 			       out_ports_3_getFlit
// Conflicts: out_ports_2_putNonFullVCs
//
// Method: out_ports_3_getFlit
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       in_ports_3_putRoutedFlit,
// 	       in_ports_3_getNonFullVCs,
// 	       out_ports_0_getFlit,
// 	       out_ports_1_getFlit,
// 	       out_ports_2_getFlit,
// 	       out_ports_3_getFlit
// Sequenced after (restricted): out_ports_0_putNonFullVCs,
// 			      out_ports_1_putNonFullVCs,
// 			      out_ports_2_putNonFullVCs,
// 			      out_ports_3_putNonFullVCs
//
// Method: out_ports_3_putNonFullVCs
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       in_ports_3_putRoutedFlit,
// 	       in_ports_3_getNonFullVCs,
// 	       out_ports_0_putNonFullVCs,
// 	       out_ports_1_putNonFullVCs,
// 	       out_ports_2_putNonFullVCs
// Sequenced before (restricted): out_ports_0_getFlit,
// 			       out_ports_1_getFlit,
// 			       out_ports_2_getFlit,
// 			       out_ports_3_getFlit
// Conflicts: out_ports_3_putNonFullVCs
//
//
// Ports:
// Name                         I/O  size props
// in_ports_0_getNonFullVCs       O     2
// in_ports_1_getNonFullVCs       O     2
// in_ports_2_getNonFullVCs       O     2
// in_ports_3_getNonFullVCs       O     2
// out_ports_0_getFlit            O    37
// out_ports_1_getFlit            O    37
// out_ports_2_getFlit            O    37
// out_ports_3_getFlit            O    37
// CLK                            I     1 clock
// RST_N                          I     1 reset
// in_ports_0_putRoutedFlit_flit_in  I    39
// in_ports_1_putRoutedFlit_flit_in  I    39
// in_ports_2_putRoutedFlit_flit_in  I    39
// in_ports_3_putRoutedFlit_flit_in  I    39
// out_ports_0_putNonFullVCs_nonFullVCs  I     2
// out_ports_1_putNonFullVCs_nonFullVCs  I     2
// out_ports_2_putNonFullVCs_nonFullVCs  I     2
// out_ports_3_putNonFullVCs_nonFullVCs  I     2
// EN_in_ports_0_putRoutedFlit    I     1
// EN_in_ports_1_putRoutedFlit    I     1
// EN_in_ports_2_putRoutedFlit    I     1
// EN_in_ports_3_putRoutedFlit    I     1
// EN_out_ports_0_putNonFullVCs   I     1
// EN_out_ports_1_putNonFullVCs   I     1
// EN_out_ports_2_putNonFullVCs   I     1
// EN_out_ports_3_putNonFullVCs   I     1
// EN_in_ports_0_getNonFullVCs    I     1 unused
// EN_in_ports_1_getNonFullVCs    I     1 unused
// EN_in_ports_2_getNonFullVCs    I     1 unused
// EN_in_ports_3_getNonFullVCs    I     1 unused
// EN_out_ports_0_getFlit         I     1 unused
// EN_out_ports_1_getFlit         I     1 unused
// EN_out_ports_2_getFlit         I     1 unused
// EN_out_ports_3_getFlit         I     1 unused
//
// Combinational paths from inputs to outputs:
//   (out_ports_0_putNonFullVCs_nonFullVCs,
//    out_ports_1_putNonFullVCs_nonFullVCs,
//    out_ports_2_putNonFullVCs_nonFullVCs,
//    out_ports_3_putNonFullVCs_nonFullVCs,
//    EN_out_ports_0_putNonFullVCs,
//    EN_out_ports_1_putNonFullVCs,
//    EN_out_ports_2_putNonFullVCs,
//    EN_out_ports_3_putNonFullVCs) -> out_ports_0_getFlit
//   (out_ports_0_putNonFullVCs_nonFullVCs,
//    out_ports_1_putNonFullVCs_nonFullVCs,
//    out_ports_2_putNonFullVCs_nonFullVCs,
//    out_ports_3_putNonFullVCs_nonFullVCs,
//    EN_out_ports_0_putNonFullVCs,
//    EN_out_ports_1_putNonFullVCs,
//    EN_out_ports_2_putNonFullVCs,
//    EN_out_ports_3_putNonFullVCs) -> out_ports_1_getFlit
//   (out_ports_0_putNonFullVCs_nonFullVCs,
//    out_ports_1_putNonFullVCs_nonFullVCs,
//    out_ports_2_putNonFullVCs_nonFullVCs,
//    out_ports_3_putNonFullVCs_nonFullVCs,
//    EN_out_ports_0_putNonFullVCs,
//    EN_out_ports_1_putNonFullVCs,
//    EN_out_ports_2_putNonFullVCs,
//    EN_out_ports_3_putNonFullVCs) -> out_ports_2_getFlit
//   (out_ports_0_putNonFullVCs_nonFullVCs,
//    out_ports_1_putNonFullVCs_nonFullVCs,
//    out_ports_2_putNonFullVCs_nonFullVCs,
//    out_ports_3_putNonFullVCs_nonFullVCs,
//    EN_out_ports_0_putNonFullVCs,
//    EN_out_ports_1_putNonFullVCs,
//    EN_out_ports_2_putNonFullVCs,
//    EN_out_ports_3_putNonFullVCs) -> out_ports_3_getFlit
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkIQRouterCoreSimple(CLK,
			    RST_N,

			    in_ports_0_putRoutedFlit_flit_in,
			    EN_in_ports_0_putRoutedFlit,

			    EN_in_ports_0_getNonFullVCs,
			    in_ports_0_getNonFullVCs,

			    in_ports_1_putRoutedFlit_flit_in,
			    EN_in_ports_1_putRoutedFlit,

			    EN_in_ports_1_getNonFullVCs,
			    in_ports_1_getNonFullVCs,

			    in_ports_2_putRoutedFlit_flit_in,
			    EN_in_ports_2_putRoutedFlit,

			    EN_in_ports_2_getNonFullVCs,
			    in_ports_2_getNonFullVCs,

			    in_ports_3_putRoutedFlit_flit_in,
			    EN_in_ports_3_putRoutedFlit,

			    EN_in_ports_3_getNonFullVCs,
			    in_ports_3_getNonFullVCs,

			    EN_out_ports_0_getFlit,
			    out_ports_0_getFlit,

			    out_ports_0_putNonFullVCs_nonFullVCs,
			    EN_out_ports_0_putNonFullVCs,

			    EN_out_ports_1_getFlit,
			    out_ports_1_getFlit,

			    out_ports_1_putNonFullVCs_nonFullVCs,
			    EN_out_ports_1_putNonFullVCs,

			    EN_out_ports_2_getFlit,
			    out_ports_2_getFlit,

			    out_ports_2_putNonFullVCs_nonFullVCs,
			    EN_out_ports_2_putNonFullVCs,

			    EN_out_ports_3_getFlit,
			    out_ports_3_getFlit,

			    out_ports_3_putNonFullVCs_nonFullVCs,
			    EN_out_ports_3_putNonFullVCs);
  input  CLK;
  input  RST_N;

  // action method in_ports_0_putRoutedFlit
  input  [38 : 0] in_ports_0_putRoutedFlit_flit_in;
  input  EN_in_ports_0_putRoutedFlit;

  // actionvalue method in_ports_0_getNonFullVCs
  input  EN_in_ports_0_getNonFullVCs;
  output [1 : 0] in_ports_0_getNonFullVCs;

  // action method in_ports_1_putRoutedFlit
  input  [38 : 0] in_ports_1_putRoutedFlit_flit_in;
  input  EN_in_ports_1_putRoutedFlit;

  // actionvalue method in_ports_1_getNonFullVCs
  input  EN_in_ports_1_getNonFullVCs;
  output [1 : 0] in_ports_1_getNonFullVCs;

  // action method in_ports_2_putRoutedFlit
  input  [38 : 0] in_ports_2_putRoutedFlit_flit_in;
  input  EN_in_ports_2_putRoutedFlit;

  // actionvalue method in_ports_2_getNonFullVCs
  input  EN_in_ports_2_getNonFullVCs;
  output [1 : 0] in_ports_2_getNonFullVCs;

  // action method in_ports_3_putRoutedFlit
  input  [38 : 0] in_ports_3_putRoutedFlit_flit_in;
  input  EN_in_ports_3_putRoutedFlit;

  // actionvalue method in_ports_3_getNonFullVCs
  input  EN_in_ports_3_getNonFullVCs;
  output [1 : 0] in_ports_3_getNonFullVCs;

  // actionvalue method out_ports_0_getFlit
  input  EN_out_ports_0_getFlit;
  output [36 : 0] out_ports_0_getFlit;

  // action method out_ports_0_putNonFullVCs
  input  [1 : 0] out_ports_0_putNonFullVCs_nonFullVCs;
  input  EN_out_ports_0_putNonFullVCs;

  // actionvalue method out_ports_1_getFlit
  input  EN_out_ports_1_getFlit;
  output [36 : 0] out_ports_1_getFlit;

  // action method out_ports_1_putNonFullVCs
  input  [1 : 0] out_ports_1_putNonFullVCs_nonFullVCs;
  input  EN_out_ports_1_putNonFullVCs;

  // actionvalue method out_ports_2_getFlit
  input  EN_out_ports_2_getFlit;
  output [36 : 0] out_ports_2_getFlit;

  // action method out_ports_2_putNonFullVCs
  input  [1 : 0] out_ports_2_putNonFullVCs_nonFullVCs;
  input  EN_out_ports_2_putNonFullVCs;

  // actionvalue method out_ports_3_getFlit
  input  EN_out_ports_3_getFlit;
  output [36 : 0] out_ports_3_getFlit;

  // action method out_ports_3_putNonFullVCs
  input  [1 : 0] out_ports_3_putNonFullVCs_nonFullVCs;
  input  EN_out_ports_3_putNonFullVCs;

  // signals for module outputs
  wire [36 : 0] out_ports_0_getFlit,
		out_ports_1_getFlit,
		out_ports_2_getFlit,
		out_ports_3_getFlit;
  wire [1 : 0] in_ports_0_getNonFullVCs,
	       in_ports_1_getNonFullVCs,
	       in_ports_2_getNonFullVCs,
	       in_ports_3_getNonFullVCs;

  // inlined wires
  wire [36 : 0] hasFlitsToSend_perIn$wget,
		hasFlitsToSend_perIn_1$wget,
		hasFlitsToSend_perIn_2$wget,
		hasFlitsToSend_perIn_3$wget;

  // register inPortVL
  reg [1 : 0] inPortVL;
  wire [1 : 0] inPortVL$D_IN;
  wire inPortVL$EN;

  // register inPortVL_1
  reg [1 : 0] inPortVL_1;
  wire [1 : 0] inPortVL_1$D_IN;
  wire inPortVL_1$EN;

  // register inPortVL_2
  reg [1 : 0] inPortVL_2;
  wire [1 : 0] inPortVL_2$D_IN;
  wire inPortVL_2$EN;

  // register inPortVL_3
  reg [1 : 0] inPortVL_3;
  wire [1 : 0] inPortVL_3$D_IN;
  wire inPortVL_3$EN;

  // register lockedVL
  reg lockedVL;
  wire lockedVL$D_IN, lockedVL$EN;

  // register lockedVL_1
  reg lockedVL_1;
  wire lockedVL_1$D_IN, lockedVL_1$EN;

  // register lockedVL_2
  reg lockedVL_2;
  wire lockedVL_2$D_IN, lockedVL_2$EN;

  // register lockedVL_3
  reg lockedVL_3;
  wire lockedVL_3$D_IN, lockedVL_3$EN;

  // register selectedIO_reg_0
  reg selectedIO_reg_0;
  wire selectedIO_reg_0$D_IN, selectedIO_reg_0$EN;

  // register selectedIO_reg_0_1
  reg selectedIO_reg_0_1;
  wire selectedIO_reg_0_1$D_IN, selectedIO_reg_0_1$EN;

  // register selectedIO_reg_0_2
  reg selectedIO_reg_0_2;
  wire selectedIO_reg_0_2$D_IN, selectedIO_reg_0_2$EN;

  // register selectedIO_reg_0_3
  reg selectedIO_reg_0_3;
  wire selectedIO_reg_0_3$D_IN, selectedIO_reg_0_3$EN;

  // register selectedIO_reg_1
  reg selectedIO_reg_1;
  wire selectedIO_reg_1$D_IN, selectedIO_reg_1$EN;

  // register selectedIO_reg_1_1
  reg selectedIO_reg_1_1;
  wire selectedIO_reg_1_1$D_IN, selectedIO_reg_1_1$EN;

  // register selectedIO_reg_1_2
  reg selectedIO_reg_1_2;
  wire selectedIO_reg_1_2$D_IN, selectedIO_reg_1_2$EN;

  // register selectedIO_reg_1_3
  reg selectedIO_reg_1_3;
  wire selectedIO_reg_1_3$D_IN, selectedIO_reg_1_3$EN;

  // register selectedIO_reg_2
  reg selectedIO_reg_2;
  wire selectedIO_reg_2$D_IN, selectedIO_reg_2$EN;

  // register selectedIO_reg_2_1
  reg selectedIO_reg_2_1;
  wire selectedIO_reg_2_1$D_IN, selectedIO_reg_2_1$EN;

  // register selectedIO_reg_2_2
  reg selectedIO_reg_2_2;
  wire selectedIO_reg_2_2$D_IN, selectedIO_reg_2_2$EN;

  // register selectedIO_reg_2_3
  reg selectedIO_reg_2_3;
  wire selectedIO_reg_2_3$D_IN, selectedIO_reg_2_3$EN;

  // register selectedIO_reg_3
  reg selectedIO_reg_3;
  wire selectedIO_reg_3$D_IN, selectedIO_reg_3$EN;

  // register selectedIO_reg_3_1
  reg selectedIO_reg_3_1;
  wire selectedIO_reg_3_1$D_IN, selectedIO_reg_3_1$EN;

  // register selectedIO_reg_3_2
  reg selectedIO_reg_3_2;
  wire selectedIO_reg_3_2$D_IN, selectedIO_reg_3_2$EN;

  // register selectedIO_reg_3_3
  reg selectedIO_reg_3_3;
  wire selectedIO_reg_3_3$D_IN, selectedIO_reg_3_3$EN;

  // ports of submodule flitBuffers
  wire [35 : 0] flitBuffers$deq, flitBuffers$enq_data_in;
  wire flitBuffers$EN_deq,
       flitBuffers$EN_enq,
       flitBuffers$notEmpty,
       flitBuffers$notFull;

  // ports of submodule flitBuffers_1
  wire [35 : 0] flitBuffers_1$deq, flitBuffers_1$enq_data_in;
  wire flitBuffers_1$EN_deq,
       flitBuffers_1$EN_enq,
       flitBuffers_1$notEmpty,
       flitBuffers_1$notFull;

  // ports of submodule flitBuffers_2
  wire [35 : 0] flitBuffers_2$deq, flitBuffers_2$enq_data_in;
  wire flitBuffers_2$EN_deq,
       flitBuffers_2$EN_enq,
       flitBuffers_2$notEmpty,
       flitBuffers_2$notFull;

  // ports of submodule flitBuffers_3
  wire [35 : 0] flitBuffers_3$deq, flitBuffers_3$enq_data_in;
  wire flitBuffers_3$EN_deq,
       flitBuffers_3$EN_enq,
       flitBuffers_3$notEmpty,
       flitBuffers_3$notFull;

  // ports of submodule outPortFIFOs
  wire [1 : 0] outPortFIFOs$enq_sendData, outPortFIFOs$first;
  wire outPortFIFOs$EN_clear, outPortFIFOs$EN_deq, outPortFIFOs$EN_enq;

  // ports of submodule outPortFIFOs_1
  wire [1 : 0] outPortFIFOs_1$enq_sendData, outPortFIFOs_1$first;
  wire outPortFIFOs_1$EN_clear, outPortFIFOs_1$EN_deq, outPortFIFOs_1$EN_enq;

  // ports of submodule outPortFIFOs_2
  wire [1 : 0] outPortFIFOs_2$enq_sendData, outPortFIFOs_2$first;
  wire outPortFIFOs_2$EN_clear, outPortFIFOs_2$EN_deq, outPortFIFOs_2$EN_enq;

  // ports of submodule outPortFIFOs_3
  wire [1 : 0] outPortFIFOs_3$enq_sendData, outPortFIFOs_3$first;
  wire outPortFIFOs_3$EN_clear, outPortFIFOs_3$EN_deq, outPortFIFOs_3$EN_enq;

  // ports of submodule routerAlloc
  wire [15 : 0] routerAlloc$allocate, routerAlloc$allocate_alloc_input;
  wire routerAlloc$EN_allocate, routerAlloc$EN_next;

  // remaining internal signals
  reg [35 : 0] IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d571,
	       IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d572,
	       IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d573;
  reg IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d314,
      IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d364,
      IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d414,
      IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d579,
      IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d580,
      IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d581,
      IF_outPortFIFOs_1_first__7_EQ_0_8_THEN_simple__ETC___d55,
      IF_outPortFIFOs_2_first__0_EQ_0_1_THEN_simple__ETC___d38,
      IF_outPortFIFOs_3_first_EQ_0_THEN_simple_credi_ETC___d22,
      IF_outPortFIFOs_first__4_EQ_0_5_THEN_simple_cr_ETC___d72;
  wire [35 : 0] IF_IF_outport_encoder_65_BIT_2_66_THEN_NOT_out_ETC___d280;
  wire [2 : 0] outport_encoder___d545,
	       outport_encoder___d546,
	       outport_encoder___d547,
	       outport_encoder___d548;
  wire [1 : 0] IF_outport_encoder_29_BIT_2_30_THEN_IF_outport_ETC___d460,
	       IF_outport_encoder_29_BIT_2_30_THEN_IF_outport_ETC___d461,
	       IF_outport_encoder_29_BIT_2_30_THEN_IF_outport_ETC___d462,
	       IF_outport_encoder_47_BIT_2_48_THEN_IF_outport_ETC___d457,
	       IF_outport_encoder_47_BIT_2_48_THEN_IF_outport_ETC___d458,
	       IF_outport_encoder_47_BIT_2_48_THEN_IF_outport_ETC___d459,
	       active_in__h25970,
	       active_in__h26764,
	       active_in__h27558;
  wire IF_IF_outport_encoder_65_BIT_2_66_THEN_NOT_out_ETC___d243,
       IF_IF_outport_encoder_65_BIT_2_66_THEN_NOT_out_ETC___d244,
       IF_IF_outport_encoder_65_BIT_2_66_THEN_NOT_out_ETC___d254,
       IF_IF_outport_encoder_65_BIT_2_66_THEN_NOT_out_ETC___d255,
       IF_IF_outport_encoder_65_BIT_2_66_THEN_NOT_out_ETC___d256,
       IF_IF_outport_encoder_65_BIT_2_66_THEN_NOT_out_ETC___d578,
       IF_outport_encoder_29_BIT_2_30_THEN_outport_en_ETC___d450,
       IF_outport_encoder_29_BIT_2_30_THEN_outport_en_ETC___d551,
       IF_outport_encoder_29_BIT_2_30_THEN_outport_en_ETC___d555,
       IF_outport_encoder_29_BIT_2_30_THEN_outport_en_ETC___d559,
       IF_outport_encoder_47_BIT_2_48_THEN_NOT_outpor_ETC___d442,
       IF_outport_encoder_47_BIT_2_48_THEN_NOT_outpor_ETC___d448,
       IF_outport_encoder_47_BIT_2_48_THEN_outport_en_ETC___d444,
       IF_outport_encoder_47_BIT_2_48_THEN_outport_en_ETC___d552,
       IF_outport_encoder_47_BIT_2_48_THEN_outport_en_ETC___d556,
       IF_outport_encoder_47_BIT_2_48_THEN_outport_en_ETC___d560,
       IF_outport_encoder_65_BIT_2_66_THEN_NOT_outpor_ETC___d520,
       IF_outport_encoder_65_BIT_2_66_THEN_NOT_outpor_ETC___d533,
       IF_outport_encoder_65_BIT_2_66_THEN_NOT_outpor_ETC___d534,
       IF_outport_encoder_65_BIT_2_66_THEN_outport_en_ETC___d519,
       IF_outport_encoder_65_BIT_2_66_THEN_outport_en_ETC___d527,
       IF_outport_encoder_65_BIT_2_66_THEN_outport_en_ETC___d529,
       IF_outport_encoder_65_BIT_2_66_THEN_outport_en_ETC___d531;

  // actionvalue method in_ports_0_getNonFullVCs
  assign in_ports_0_getNonFullVCs = { 1'd0, flitBuffers$notFull } ;

  // actionvalue method in_ports_1_getNonFullVCs
  assign in_ports_1_getNonFullVCs = { 1'd0, flitBuffers_1$notFull } ;

  // actionvalue method in_ports_2_getNonFullVCs
  assign in_ports_2_getNonFullVCs = { 1'd0, flitBuffers_2$notFull } ;

  // actionvalue method in_ports_3_getNonFullVCs
  assign in_ports_3_getNonFullVCs = { 1'd0, flitBuffers_3$notFull } ;

  // actionvalue method out_ports_0_getFlit
  assign out_ports_0_getFlit =
	     { IF_outport_encoder_65_BIT_2_66_THEN_outport_en_ETC___d519 &&
	       IF_IF_outport_encoder_65_BIT_2_66_THEN_NOT_out_ETC___d256,
	       IF_outport_encoder_65_BIT_2_66_THEN_NOT_outpor_ETC___d520 ?
		 hasFlitsToSend_perIn$wget[35:0] :
		 IF_IF_outport_encoder_65_BIT_2_66_THEN_NOT_out_ETC___d280 } ;

  // actionvalue method out_ports_1_getFlit
  assign out_ports_1_getFlit =
	     { IF_outport_encoder_65_BIT_2_66_THEN_outport_en_ETC___d527 &&
	       IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d314,
	       IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d571 } ;

  // actionvalue method out_ports_2_getFlit
  assign out_ports_2_getFlit =
	     { IF_outport_encoder_65_BIT_2_66_THEN_outport_en_ETC___d529 &&
	       IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d364,
	       IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d572 } ;

  // actionvalue method out_ports_3_getFlit
  assign out_ports_3_getFlit =
	     { IF_outport_encoder_65_BIT_2_66_THEN_outport_en_ETC___d531 &&
	       IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d414,
	       IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d573 } ;

  // submodule flitBuffers
  mkInputQueue flitBuffers(.CLK(CLK),
			   .RST_N(RST_N),
			   .enq_data_in(flitBuffers$enq_data_in),
			   .EN_enq(flitBuffers$EN_enq),
			   .EN_deq(flitBuffers$EN_deq),
			   .deq(flitBuffers$deq),
			   .notEmpty(flitBuffers$notEmpty),
			   .notFull(flitBuffers$notFull));

  // submodule flitBuffers_1
  mkInputQueue flitBuffers_1(.CLK(CLK),
			     .RST_N(RST_N),
			     .enq_data_in(flitBuffers_1$enq_data_in),
			     .EN_enq(flitBuffers_1$EN_enq),
			     .EN_deq(flitBuffers_1$EN_deq),
			     .deq(flitBuffers_1$deq),
			     .notEmpty(flitBuffers_1$notEmpty),
			     .notFull(flitBuffers_1$notFull));

  // submodule flitBuffers_2
  mkInputQueue flitBuffers_2(.CLK(CLK),
			     .RST_N(RST_N),
			     .enq_data_in(flitBuffers_2$enq_data_in),
			     .EN_enq(flitBuffers_2$EN_enq),
			     .EN_deq(flitBuffers_2$EN_deq),
			     .deq(flitBuffers_2$deq),
			     .notEmpty(flitBuffers_2$notEmpty),
			     .notFull(flitBuffers_2$notFull));

  // submodule flitBuffers_3
  mkInputQueue flitBuffers_3(.CLK(CLK),
			     .RST_N(RST_N),
			     .enq_data_in(flitBuffers_3$enq_data_in),
			     .EN_enq(flitBuffers_3$EN_enq),
			     .EN_deq(flitBuffers_3$EN_deq),
			     .deq(flitBuffers_3$deq),
			     .notEmpty(flitBuffers_3$notEmpty),
			     .notFull(flitBuffers_3$notFull));

  // submodule outPortFIFOs
  mkOutPortFIFO outPortFIFOs(.CLK(CLK),
			     .RST_N(RST_N),
			     .enq_sendData(outPortFIFOs$enq_sendData),
			     .EN_enq(outPortFIFOs$EN_enq),
			     .EN_deq(outPortFIFOs$EN_deq),
			     .EN_clear(outPortFIFOs$EN_clear),
			     .RDY_enq(),
			     .RDY_deq(),
			     .first(outPortFIFOs$first),
			     .RDY_first(),
			     .notFull(),
			     .RDY_notFull(),
			     .notEmpty(),
			     .RDY_notEmpty(),
			     .count(),
			     .RDY_count(),
			     .RDY_clear());

  // submodule outPortFIFOs_1
  mkOutPortFIFO outPortFIFOs_1(.CLK(CLK),
			       .RST_N(RST_N),
			       .enq_sendData(outPortFIFOs_1$enq_sendData),
			       .EN_enq(outPortFIFOs_1$EN_enq),
			       .EN_deq(outPortFIFOs_1$EN_deq),
			       .EN_clear(outPortFIFOs_1$EN_clear),
			       .RDY_enq(),
			       .RDY_deq(),
			       .first(outPortFIFOs_1$first),
			       .RDY_first(),
			       .notFull(),
			       .RDY_notFull(),
			       .notEmpty(),
			       .RDY_notEmpty(),
			       .count(),
			       .RDY_count(),
			       .RDY_clear());

  // submodule outPortFIFOs_2
  mkOutPortFIFO outPortFIFOs_2(.CLK(CLK),
			       .RST_N(RST_N),
			       .enq_sendData(outPortFIFOs_2$enq_sendData),
			       .EN_enq(outPortFIFOs_2$EN_enq),
			       .EN_deq(outPortFIFOs_2$EN_deq),
			       .EN_clear(outPortFIFOs_2$EN_clear),
			       .RDY_enq(),
			       .RDY_deq(),
			       .first(outPortFIFOs_2$first),
			       .RDY_first(),
			       .notFull(),
			       .RDY_notFull(),
			       .notEmpty(),
			       .RDY_notEmpty(),
			       .count(),
			       .RDY_count(),
			       .RDY_clear());

  // submodule outPortFIFOs_3
  mkOutPortFIFO outPortFIFOs_3(.CLK(CLK),
			       .RST_N(RST_N),
			       .enq_sendData(outPortFIFOs_3$enq_sendData),
			       .EN_enq(outPortFIFOs_3$EN_enq),
			       .EN_deq(outPortFIFOs_3$EN_deq),
			       .EN_clear(outPortFIFOs_3$EN_clear),
			       .RDY_enq(),
			       .RDY_deq(),
			       .first(outPortFIFOs_3$first),
			       .RDY_first(),
			       .notFull(),
			       .RDY_notFull(),
			       .notEmpty(),
			       .RDY_notEmpty(),
			       .count(),
			       .RDY_count(),
			       .RDY_clear());

  // submodule routerAlloc
  mkSepRouterAllocator routerAlloc(.pipeline(1'd0),
				   .CLK(CLK),
				   .RST_N(RST_N),
				   .allocate_alloc_input(routerAlloc$allocate_alloc_input),
				   .EN_allocate(routerAlloc$EN_allocate),
				   .EN_next(routerAlloc$EN_next),
				   .allocate(routerAlloc$allocate));

  // inlined wires
  assign hasFlitsToSend_perIn$wget = { 1'd1, flitBuffers$deq } ;
  assign hasFlitsToSend_perIn_1$wget = { 1'd1, flitBuffers_1$deq } ;
  assign hasFlitsToSend_perIn_2$wget = { 1'd1, flitBuffers_2$deq } ;
  assign hasFlitsToSend_perIn_3$wget = { 1'd1, flitBuffers_3$deq } ;

  // register inPortVL
  assign inPortVL$D_IN = 2'h0 ;
  assign inPortVL$EN = 1'b0 ;

  // register inPortVL_1
  assign inPortVL_1$D_IN = 2'h0 ;
  assign inPortVL_1$EN = 1'b0 ;

  // register inPortVL_2
  assign inPortVL_2$D_IN = 2'h0 ;
  assign inPortVL_2$EN = 1'b0 ;

  // register inPortVL_3
  assign inPortVL_3$D_IN = 2'h0 ;
  assign inPortVL_3$EN = 1'b0 ;

  // register lockedVL
  assign lockedVL$D_IN = 1'b0 ;
  assign lockedVL$EN = 1'b0 ;

  // register lockedVL_1
  assign lockedVL_1$D_IN = 1'b0 ;
  assign lockedVL_1$EN = 1'b0 ;

  // register lockedVL_2
  assign lockedVL_2$D_IN = 1'b0 ;
  assign lockedVL_2$EN = 1'b0 ;

  // register lockedVL_3
  assign lockedVL_3$D_IN = 1'b0 ;
  assign lockedVL_3$EN = 1'b0 ;

  // register selectedIO_reg_0
  assign selectedIO_reg_0$D_IN = 1'b0 ;
  assign selectedIO_reg_0$EN = 1'b0 ;

  // register selectedIO_reg_0_1
  assign selectedIO_reg_0_1$D_IN = 1'b0 ;
  assign selectedIO_reg_0_1$EN = 1'b0 ;

  // register selectedIO_reg_0_2
  assign selectedIO_reg_0_2$D_IN = 1'b0 ;
  assign selectedIO_reg_0_2$EN = 1'b0 ;

  // register selectedIO_reg_0_3
  assign selectedIO_reg_0_3$D_IN = 1'b0 ;
  assign selectedIO_reg_0_3$EN = 1'b0 ;

  // register selectedIO_reg_1
  assign selectedIO_reg_1$D_IN = 1'b0 ;
  assign selectedIO_reg_1$EN = 1'b0 ;

  // register selectedIO_reg_1_1
  assign selectedIO_reg_1_1$D_IN = 1'b0 ;
  assign selectedIO_reg_1_1$EN = 1'b0 ;

  // register selectedIO_reg_1_2
  assign selectedIO_reg_1_2$D_IN = 1'b0 ;
  assign selectedIO_reg_1_2$EN = 1'b0 ;

  // register selectedIO_reg_1_3
  assign selectedIO_reg_1_3$D_IN = 1'b0 ;
  assign selectedIO_reg_1_3$EN = 1'b0 ;

  // register selectedIO_reg_2
  assign selectedIO_reg_2$D_IN = 1'b0 ;
  assign selectedIO_reg_2$EN = 1'b0 ;

  // register selectedIO_reg_2_1
  assign selectedIO_reg_2_1$D_IN = 1'b0 ;
  assign selectedIO_reg_2_1$EN = 1'b0 ;

  // register selectedIO_reg_2_2
  assign selectedIO_reg_2_2$D_IN = 1'b0 ;
  assign selectedIO_reg_2_2$EN = 1'b0 ;

  // register selectedIO_reg_2_3
  assign selectedIO_reg_2_3$D_IN = 1'b0 ;
  assign selectedIO_reg_2_3$EN = 1'b0 ;

  // register selectedIO_reg_3
  assign selectedIO_reg_3$D_IN = 1'b0 ;
  assign selectedIO_reg_3$EN = 1'b0 ;

  // register selectedIO_reg_3_1
  assign selectedIO_reg_3_1$D_IN = 1'b0 ;
  assign selectedIO_reg_3_1$EN = 1'b0 ;

  // register selectedIO_reg_3_2
  assign selectedIO_reg_3_2$D_IN = 1'b0 ;
  assign selectedIO_reg_3_2$EN = 1'b0 ;

  // register selectedIO_reg_3_3
  assign selectedIO_reg_3_3$D_IN = 1'b0 ;
  assign selectedIO_reg_3_3$EN = 1'b0 ;

  // submodule flitBuffers
  assign flitBuffers$enq_data_in = in_ports_0_putRoutedFlit_flit_in[37:2] ;
  assign flitBuffers$EN_enq =
	     EN_in_ports_0_putRoutedFlit &&
	     in_ports_0_putRoutedFlit_flit_in[38] ;
  assign flitBuffers$EN_deq = outport_encoder___d548[2] ;

  // submodule flitBuffers_1
  assign flitBuffers_1$enq_data_in = in_ports_1_putRoutedFlit_flit_in[37:2] ;
  assign flitBuffers_1$EN_enq =
	     EN_in_ports_1_putRoutedFlit &&
	     in_ports_1_putRoutedFlit_flit_in[38] ;
  assign flitBuffers_1$EN_deq = outport_encoder___d547[2] ;

  // submodule flitBuffers_2
  assign flitBuffers_2$enq_data_in = in_ports_2_putRoutedFlit_flit_in[37:2] ;
  assign flitBuffers_2$EN_enq =
	     EN_in_ports_2_putRoutedFlit &&
	     in_ports_2_putRoutedFlit_flit_in[38] ;
  assign flitBuffers_2$EN_deq = outport_encoder___d546[2] ;

  // submodule flitBuffers_3
  assign flitBuffers_3$enq_data_in = in_ports_3_putRoutedFlit_flit_in[37:2] ;
  assign flitBuffers_3$EN_enq =
	     EN_in_ports_3_putRoutedFlit &&
	     in_ports_3_putRoutedFlit_flit_in[38] ;
  assign flitBuffers_3$EN_deq = outport_encoder___d545[2] ;

  // submodule outPortFIFOs
  assign outPortFIFOs$enq_sendData = in_ports_0_putRoutedFlit_flit_in[1:0] ;
  assign outPortFIFOs$EN_enq =
	     EN_in_ports_0_putRoutedFlit &&
	     in_ports_0_putRoutedFlit_flit_in[38] ;
  assign outPortFIFOs$EN_deq = outport_encoder___d548[2] ;
  assign outPortFIFOs$EN_clear = 1'b0 ;

  // submodule outPortFIFOs_1
  assign outPortFIFOs_1$enq_sendData = in_ports_1_putRoutedFlit_flit_in[1:0] ;
  assign outPortFIFOs_1$EN_enq =
	     EN_in_ports_1_putRoutedFlit &&
	     in_ports_1_putRoutedFlit_flit_in[38] ;
  assign outPortFIFOs_1$EN_deq = outport_encoder___d547[2] ;
  assign outPortFIFOs_1$EN_clear = 1'b0 ;

  // submodule outPortFIFOs_2
  assign outPortFIFOs_2$enq_sendData = in_ports_2_putRoutedFlit_flit_in[1:0] ;
  assign outPortFIFOs_2$EN_enq =
	     EN_in_ports_2_putRoutedFlit &&
	     in_ports_2_putRoutedFlit_flit_in[38] ;
  assign outPortFIFOs_2$EN_deq = outport_encoder___d546[2] ;
  assign outPortFIFOs_2$EN_clear = 1'b0 ;

  // submodule outPortFIFOs_3
  assign outPortFIFOs_3$enq_sendData = in_ports_3_putRoutedFlit_flit_in[1:0] ;
  assign outPortFIFOs_3$EN_enq =
	     EN_in_ports_3_putRoutedFlit &&
	     in_ports_3_putRoutedFlit_flit_in[38] ;
  assign outPortFIFOs_3$EN_deq = outport_encoder___d545[2] ;
  assign outPortFIFOs_3$EN_clear = 1'b0 ;

  // submodule routerAlloc
  assign routerAlloc$allocate_alloc_input =
	     { flitBuffers_3$notEmpty &&
	       IF_outPortFIFOs_3_first_EQ_0_THEN_simple_credi_ETC___d22 &&
	       outPortFIFOs_3$first == 2'd3,
	       flitBuffers_3$notEmpty &&
	       IF_outPortFIFOs_3_first_EQ_0_THEN_simple_credi_ETC___d22 &&
	       outPortFIFOs_3$first == 2'd2,
	       flitBuffers_3$notEmpty &&
	       IF_outPortFIFOs_3_first_EQ_0_THEN_simple_credi_ETC___d22 &&
	       outPortFIFOs_3$first == 2'd1,
	       flitBuffers_3$notEmpty &&
	       IF_outPortFIFOs_3_first_EQ_0_THEN_simple_credi_ETC___d22 &&
	       outPortFIFOs_3$first == 2'd0,
	       flitBuffers_2$notEmpty &&
	       IF_outPortFIFOs_2_first__0_EQ_0_1_THEN_simple__ETC___d38 &&
	       outPortFIFOs_2$first == 2'd3,
	       flitBuffers_2$notEmpty &&
	       IF_outPortFIFOs_2_first__0_EQ_0_1_THEN_simple__ETC___d38 &&
	       outPortFIFOs_2$first == 2'd2,
	       flitBuffers_2$notEmpty &&
	       IF_outPortFIFOs_2_first__0_EQ_0_1_THEN_simple__ETC___d38 &&
	       outPortFIFOs_2$first == 2'd1,
	       flitBuffers_2$notEmpty &&
	       IF_outPortFIFOs_2_first__0_EQ_0_1_THEN_simple__ETC___d38 &&
	       outPortFIFOs_2$first == 2'd0,
	       flitBuffers_1$notEmpty &&
	       IF_outPortFIFOs_1_first__7_EQ_0_8_THEN_simple__ETC___d55 &&
	       outPortFIFOs_1$first == 2'd3,
	       flitBuffers_1$notEmpty &&
	       IF_outPortFIFOs_1_first__7_EQ_0_8_THEN_simple__ETC___d55 &&
	       outPortFIFOs_1$first == 2'd2,
	       flitBuffers_1$notEmpty &&
	       IF_outPortFIFOs_1_first__7_EQ_0_8_THEN_simple__ETC___d55 &&
	       outPortFIFOs_1$first == 2'd1,
	       flitBuffers_1$notEmpty &&
	       IF_outPortFIFOs_1_first__7_EQ_0_8_THEN_simple__ETC___d55 &&
	       outPortFIFOs_1$first == 2'd0,
	       flitBuffers$notEmpty &&
	       IF_outPortFIFOs_first__4_EQ_0_5_THEN_simple_cr_ETC___d72 &&
	       outPortFIFOs$first == 2'd3,
	       flitBuffers$notEmpty &&
	       IF_outPortFIFOs_first__4_EQ_0_5_THEN_simple_cr_ETC___d72 &&
	       outPortFIFOs$first == 2'd2,
	       flitBuffers$notEmpty &&
	       IF_outPortFIFOs_first__4_EQ_0_5_THEN_simple_cr_ETC___d72 &&
	       outPortFIFOs$first == 2'd1,
	       flitBuffers$notEmpty &&
	       IF_outPortFIFOs_first__4_EQ_0_5_THEN_simple_cr_ETC___d72 &&
	       outPortFIFOs$first == 2'd0 } ;
  assign routerAlloc$EN_allocate = 1'd1 ;
  assign routerAlloc$EN_next = 1'd1 ;

  // remaining internal signals
  module_outport_encoder instance_outport_encoder_0(.outport_encoder_vec({ { 1'd1 &&
									     routerAlloc$allocate[7],
									     1'd1 &&
									     routerAlloc$allocate[6] },
									   1'd1 &&
									   routerAlloc$allocate[5],
									   1'd1 &&
									   routerAlloc$allocate[4] }),
						    .outport_encoder(outport_encoder___d547));
  module_outport_encoder instance_outport_encoder_1(.outport_encoder_vec({ { 1'd1 &&
									     routerAlloc$allocate[3],
									     1'd1 &&
									     routerAlloc$allocate[2] },
									   1'd1 &&
									   routerAlloc$allocate[1],
									   1'd1 &&
									   routerAlloc$allocate[0] }),
						    .outport_encoder(outport_encoder___d548));
  module_outport_encoder instance_outport_encoder_2(.outport_encoder_vec({ { 1'd1 &&
									     routerAlloc$allocate[11],
									     1'd1 &&
									     routerAlloc$allocate[10] },
									   1'd1 &&
									   routerAlloc$allocate[9],
									   1'd1 &&
									   routerAlloc$allocate[8] }),
						    .outport_encoder(outport_encoder___d546));
  module_outport_encoder instance_outport_encoder_3(.outport_encoder_vec({ { 1'd1 &&
									     routerAlloc$allocate[15],
									     1'd1 &&
									     routerAlloc$allocate[14] },
									   1'd1 &&
									   routerAlloc$allocate[13],
									   1'd1 &&
									   routerAlloc$allocate[12] }),
						    .outport_encoder(outport_encoder___d545));
  assign IF_IF_outport_encoder_65_BIT_2_66_THEN_NOT_out_ETC___d243 =
	     IF_outport_encoder_65_BIT_2_66_THEN_NOT_outpor_ETC___d534 ?
	       !outport_encoder___d546[2] ||
	       !hasFlitsToSend_perIn_2$wget[36] :
	       outport_encoder___d545[2] &&
	       outport_encoder___d545[1:0] == 2'd0 &&
	       !hasFlitsToSend_perIn_3$wget[36] ;
  assign IF_IF_outport_encoder_65_BIT_2_66_THEN_NOT_out_ETC___d244 =
	     IF_outport_encoder_65_BIT_2_66_THEN_NOT_outpor_ETC___d533 ?
	       !outport_encoder___d547[2] ||
	       !hasFlitsToSend_perIn_1$wget[36] :
	       IF_IF_outport_encoder_65_BIT_2_66_THEN_NOT_out_ETC___d243 ;
  assign IF_IF_outport_encoder_65_BIT_2_66_THEN_NOT_out_ETC___d254 =
	     IF_outport_encoder_65_BIT_2_66_THEN_NOT_outpor_ETC___d534 ?
	       outport_encoder___d546[2] && hasFlitsToSend_perIn_2$wget[36] :
	       !outport_encoder___d545[2] ||
	       outport_encoder___d545[1:0] != 2'd0 ||
	       hasFlitsToSend_perIn_3$wget[36] ;
  assign IF_IF_outport_encoder_65_BIT_2_66_THEN_NOT_out_ETC___d255 =
	     IF_outport_encoder_65_BIT_2_66_THEN_NOT_outpor_ETC___d533 ?
	       outport_encoder___d547[2] && hasFlitsToSend_perIn_1$wget[36] :
	       IF_IF_outport_encoder_65_BIT_2_66_THEN_NOT_out_ETC___d254 ;
  assign IF_IF_outport_encoder_65_BIT_2_66_THEN_NOT_out_ETC___d256 =
	     IF_outport_encoder_65_BIT_2_66_THEN_NOT_outpor_ETC___d520 ?
	       outport_encoder___d548[2] && hasFlitsToSend_perIn$wget[36] :
	       IF_IF_outport_encoder_65_BIT_2_66_THEN_NOT_out_ETC___d255 ;
  assign IF_IF_outport_encoder_65_BIT_2_66_THEN_NOT_out_ETC___d280 =
	     IF_outport_encoder_65_BIT_2_66_THEN_NOT_outpor_ETC___d533 ?
	       hasFlitsToSend_perIn_1$wget[35:0] :
	       (IF_outport_encoder_65_BIT_2_66_THEN_NOT_outpor_ETC___d534 ?
		  hasFlitsToSend_perIn_2$wget[35:0] :
		  hasFlitsToSend_perIn_3$wget[35:0]) ;
  assign IF_IF_outport_encoder_65_BIT_2_66_THEN_NOT_out_ETC___d578 =
	     IF_outport_encoder_65_BIT_2_66_THEN_NOT_outpor_ETC___d520 ?
	       !outport_encoder___d548[2] || !hasFlitsToSend_perIn$wget[36] :
	       IF_IF_outport_encoder_65_BIT_2_66_THEN_NOT_out_ETC___d244 ;
  assign IF_outport_encoder_29_BIT_2_30_THEN_IF_outport_ETC___d460 =
	     outport_encoder___d547[2] ?
	       ((outport_encoder___d547[1:0] == 2'd1) ?
		  outport_encoder___d547[1:0] :
		  2'd0) :
	       2'd0 ;
  assign IF_outport_encoder_29_BIT_2_30_THEN_IF_outport_ETC___d461 =
	     outport_encoder___d547[2] ?
	       ((outport_encoder___d547[1:0] == 2'd2) ? 2'd1 : 2'd0) :
	       2'd0 ;
  assign IF_outport_encoder_29_BIT_2_30_THEN_IF_outport_ETC___d462 =
	     outport_encoder___d547[2] ?
	       ((outport_encoder___d547[1:0] == 2'd3) ? 2'd1 : 2'd0) :
	       2'd0 ;
  assign IF_outport_encoder_29_BIT_2_30_THEN_outport_en_ETC___d450 =
	     outport_encoder___d547[2] ?
	       outport_encoder___d547[1:0] == 2'd0 ||
	       outport_encoder___d548[2] &&
	       outport_encoder___d548[1:0] == 2'd0 :
	       outport_encoder___d548[2] &&
	       outport_encoder___d548[1:0] == 2'd0 ;
  assign IF_outport_encoder_29_BIT_2_30_THEN_outport_en_ETC___d551 =
	     outport_encoder___d547[2] ?
	       outport_encoder___d547[1:0] == 2'd1 ||
	       outport_encoder___d548[2] &&
	       outport_encoder___d548[1:0] == 2'd1 :
	       outport_encoder___d548[2] &&
	       outport_encoder___d548[1:0] == 2'd1 ;
  assign IF_outport_encoder_29_BIT_2_30_THEN_outport_en_ETC___d555 =
	     outport_encoder___d547[2] ?
	       outport_encoder___d547[1:0] == 2'd2 ||
	       outport_encoder___d548[2] &&
	       outport_encoder___d548[1:0] == 2'd2 :
	       outport_encoder___d548[2] &&
	       outport_encoder___d548[1:0] == 2'd2 ;
  assign IF_outport_encoder_29_BIT_2_30_THEN_outport_en_ETC___d559 =
	     outport_encoder___d547[2] ?
	       outport_encoder___d547[1:0] == 2'd3 ||
	       outport_encoder___d548[2] &&
	       outport_encoder___d548[1:0] == 2'd3 :
	       outport_encoder___d548[2] &&
	       outport_encoder___d548[1:0] == 2'd3 ;
  assign IF_outport_encoder_47_BIT_2_48_THEN_IF_outport_ETC___d457 =
	     outport_encoder___d546[2] ?
	       ((outport_encoder___d546[1:0] == 2'd1) ?
		  2'd2 :
		  IF_outport_encoder_29_BIT_2_30_THEN_IF_outport_ETC___d460) :
	       IF_outport_encoder_29_BIT_2_30_THEN_IF_outport_ETC___d460 ;
  assign IF_outport_encoder_47_BIT_2_48_THEN_IF_outport_ETC___d458 =
	     outport_encoder___d546[2] ?
	       ((outport_encoder___d546[1:0] == 2'd2) ?
		  outport_encoder___d546[1:0] :
		  IF_outport_encoder_29_BIT_2_30_THEN_IF_outport_ETC___d461) :
	       IF_outport_encoder_29_BIT_2_30_THEN_IF_outport_ETC___d461 ;
  assign IF_outport_encoder_47_BIT_2_48_THEN_IF_outport_ETC___d459 =
	     outport_encoder___d546[2] ?
	       ((outport_encoder___d546[1:0] == 2'd3) ?
		  2'd2 :
		  IF_outport_encoder_29_BIT_2_30_THEN_IF_outport_ETC___d462) :
	       IF_outport_encoder_29_BIT_2_30_THEN_IF_outport_ETC___d462 ;
  assign IF_outport_encoder_47_BIT_2_48_THEN_NOT_outpor_ETC___d442 =
	     outport_encoder___d546[2] ?
	       outport_encoder___d546[1:0] != 2'd0 &&
	       (!outport_encoder___d547[2] ||
		outport_encoder___d547[1:0] != 2'd0) :
	       !outport_encoder___d547[2] ||
	       outport_encoder___d547[1:0] != 2'd0 ;
  assign IF_outport_encoder_47_BIT_2_48_THEN_NOT_outpor_ETC___d448 =
	     outport_encoder___d546[2] ?
	       outport_encoder___d546[1:0] != 2'd0 &&
	       outport_encoder___d547[2] &&
	       outport_encoder___d547[1:0] == 2'd0 :
	       outport_encoder___d547[2] &&
	       outport_encoder___d547[1:0] == 2'd0 ;
  assign IF_outport_encoder_47_BIT_2_48_THEN_outport_en_ETC___d444 =
	     outport_encoder___d546[2] ?
	       outport_encoder___d546[1:0] == 2'd0 ||
	       IF_outport_encoder_29_BIT_2_30_THEN_outport_en_ETC___d450 :
	       IF_outport_encoder_29_BIT_2_30_THEN_outport_en_ETC___d450 ;
  assign IF_outport_encoder_47_BIT_2_48_THEN_outport_en_ETC___d552 =
	     outport_encoder___d546[2] ?
	       outport_encoder___d546[1:0] == 2'd1 ||
	       IF_outport_encoder_29_BIT_2_30_THEN_outport_en_ETC___d551 :
	       IF_outport_encoder_29_BIT_2_30_THEN_outport_en_ETC___d551 ;
  assign IF_outport_encoder_47_BIT_2_48_THEN_outport_en_ETC___d556 =
	     outport_encoder___d546[2] ?
	       outport_encoder___d546[1:0] == 2'd2 ||
	       IF_outport_encoder_29_BIT_2_30_THEN_outport_en_ETC___d555 :
	       IF_outport_encoder_29_BIT_2_30_THEN_outport_en_ETC___d555 ;
  assign IF_outport_encoder_47_BIT_2_48_THEN_outport_en_ETC___d560 =
	     outport_encoder___d546[2] ?
	       outport_encoder___d546[1:0] == 2'd3 ||
	       IF_outport_encoder_29_BIT_2_30_THEN_outport_en_ETC___d559 :
	       IF_outport_encoder_29_BIT_2_30_THEN_outport_en_ETC___d559 ;
  assign IF_outport_encoder_65_BIT_2_66_THEN_NOT_outpor_ETC___d520 =
	     outport_encoder___d545[2] ?
	       outport_encoder___d545[1:0] != 2'd0 &&
	       IF_outport_encoder_47_BIT_2_48_THEN_NOT_outpor_ETC___d442 :
	       IF_outport_encoder_47_BIT_2_48_THEN_NOT_outpor_ETC___d442 ;
  assign IF_outport_encoder_65_BIT_2_66_THEN_NOT_outpor_ETC___d533 =
	     outport_encoder___d545[2] ?
	       outport_encoder___d545[1:0] != 2'd0 &&
	       IF_outport_encoder_47_BIT_2_48_THEN_NOT_outpor_ETC___d448 :
	       IF_outport_encoder_47_BIT_2_48_THEN_NOT_outpor_ETC___d448 ;
  assign IF_outport_encoder_65_BIT_2_66_THEN_NOT_outpor_ETC___d534 =
	     outport_encoder___d545[2] ?
	       outport_encoder___d545[1:0] != 2'd0 &&
	       outport_encoder___d546[2] &&
	       outport_encoder___d546[1:0] == 2'd0 :
	       outport_encoder___d546[2] &&
	       outport_encoder___d546[1:0] == 2'd0 ;
  assign IF_outport_encoder_65_BIT_2_66_THEN_outport_en_ETC___d519 =
	     outport_encoder___d545[2] ?
	       outport_encoder___d545[1:0] == 2'd0 ||
	       IF_outport_encoder_47_BIT_2_48_THEN_outport_en_ETC___d444 :
	       IF_outport_encoder_47_BIT_2_48_THEN_outport_en_ETC___d444 ;
  assign IF_outport_encoder_65_BIT_2_66_THEN_outport_en_ETC___d527 =
	     outport_encoder___d545[2] ?
	       outport_encoder___d545[1:0] == 2'd1 ||
	       IF_outport_encoder_47_BIT_2_48_THEN_outport_en_ETC___d552 :
	       IF_outport_encoder_47_BIT_2_48_THEN_outport_en_ETC___d552 ;
  assign IF_outport_encoder_65_BIT_2_66_THEN_outport_en_ETC___d529 =
	     outport_encoder___d545[2] ?
	       outport_encoder___d545[1:0] == 2'd2 ||
	       IF_outport_encoder_47_BIT_2_48_THEN_outport_en_ETC___d556 :
	       IF_outport_encoder_47_BIT_2_48_THEN_outport_en_ETC___d556 ;
  assign IF_outport_encoder_65_BIT_2_66_THEN_outport_en_ETC___d531 =
	     outport_encoder___d545[2] ?
	       outport_encoder___d545[1:0] == 2'd3 ||
	       IF_outport_encoder_47_BIT_2_48_THEN_outport_en_ETC___d560 :
	       IF_outport_encoder_47_BIT_2_48_THEN_outport_en_ETC___d560 ;
  assign active_in__h25970 =
	     outport_encoder___d545[2] ?
	       ((outport_encoder___d545[1:0] == 2'd1) ?
		  2'd3 :
		  IF_outport_encoder_47_BIT_2_48_THEN_IF_outport_ETC___d457) :
	       IF_outport_encoder_47_BIT_2_48_THEN_IF_outport_ETC___d457 ;
  assign active_in__h26764 =
	     outport_encoder___d545[2] ?
	       ((outport_encoder___d545[1:0] == 2'd2) ?
		  2'd3 :
		  IF_outport_encoder_47_BIT_2_48_THEN_IF_outport_ETC___d458) :
	       IF_outport_encoder_47_BIT_2_48_THEN_IF_outport_ETC___d458 ;
  assign active_in__h27558 =
	     outport_encoder___d545[2] ?
	       ((outport_encoder___d545[1:0] == 2'd3) ?
		  outport_encoder___d545[1:0] :
		  IF_outport_encoder_47_BIT_2_48_THEN_IF_outport_ETC___d459) :
	       IF_outport_encoder_47_BIT_2_48_THEN_IF_outport_ETC___d459 ;
  always@(outPortFIFOs_3$first or
	  EN_out_ports_3_putNonFullVCs or
	  out_ports_3_putNonFullVCs_nonFullVCs or
	  EN_out_ports_0_putNonFullVCs or
	  out_ports_0_putNonFullVCs_nonFullVCs or
	  EN_out_ports_1_putNonFullVCs or
	  out_ports_1_putNonFullVCs_nonFullVCs or
	  EN_out_ports_2_putNonFullVCs or
	  out_ports_2_putNonFullVCs_nonFullVCs)
  begin
    case (outPortFIFOs_3$first)
      2'd0:
	  IF_outPortFIFOs_3_first_EQ_0_THEN_simple_credi_ETC___d22 =
	      EN_out_ports_0_putNonFullVCs &&
	      out_ports_0_putNonFullVCs_nonFullVCs[0];
      2'd1:
	  IF_outPortFIFOs_3_first_EQ_0_THEN_simple_credi_ETC___d22 =
	      EN_out_ports_1_putNonFullVCs &&
	      out_ports_1_putNonFullVCs_nonFullVCs[0];
      2'd2:
	  IF_outPortFIFOs_3_first_EQ_0_THEN_simple_credi_ETC___d22 =
	      EN_out_ports_2_putNonFullVCs &&
	      out_ports_2_putNonFullVCs_nonFullVCs[0];
      2'd3:
	  IF_outPortFIFOs_3_first_EQ_0_THEN_simple_credi_ETC___d22 =
	      EN_out_ports_3_putNonFullVCs &&
	      out_ports_3_putNonFullVCs_nonFullVCs[0];
    endcase
  end
  always@(outPortFIFOs_2$first or
	  EN_out_ports_3_putNonFullVCs or
	  out_ports_3_putNonFullVCs_nonFullVCs or
	  EN_out_ports_0_putNonFullVCs or
	  out_ports_0_putNonFullVCs_nonFullVCs or
	  EN_out_ports_1_putNonFullVCs or
	  out_ports_1_putNonFullVCs_nonFullVCs or
	  EN_out_ports_2_putNonFullVCs or
	  out_ports_2_putNonFullVCs_nonFullVCs)
  begin
    case (outPortFIFOs_2$first)
      2'd0:
	  IF_outPortFIFOs_2_first__0_EQ_0_1_THEN_simple__ETC___d38 =
	      EN_out_ports_0_putNonFullVCs &&
	      out_ports_0_putNonFullVCs_nonFullVCs[0];
      2'd1:
	  IF_outPortFIFOs_2_first__0_EQ_0_1_THEN_simple__ETC___d38 =
	      EN_out_ports_1_putNonFullVCs &&
	      out_ports_1_putNonFullVCs_nonFullVCs[0];
      2'd2:
	  IF_outPortFIFOs_2_first__0_EQ_0_1_THEN_simple__ETC___d38 =
	      EN_out_ports_2_putNonFullVCs &&
	      out_ports_2_putNonFullVCs_nonFullVCs[0];
      2'd3:
	  IF_outPortFIFOs_2_first__0_EQ_0_1_THEN_simple__ETC___d38 =
	      EN_out_ports_3_putNonFullVCs &&
	      out_ports_3_putNonFullVCs_nonFullVCs[0];
    endcase
  end
  always@(outPortFIFOs_1$first or
	  EN_out_ports_3_putNonFullVCs or
	  out_ports_3_putNonFullVCs_nonFullVCs or
	  EN_out_ports_0_putNonFullVCs or
	  out_ports_0_putNonFullVCs_nonFullVCs or
	  EN_out_ports_1_putNonFullVCs or
	  out_ports_1_putNonFullVCs_nonFullVCs or
	  EN_out_ports_2_putNonFullVCs or
	  out_ports_2_putNonFullVCs_nonFullVCs)
  begin
    case (outPortFIFOs_1$first)
      2'd0:
	  IF_outPortFIFOs_1_first__7_EQ_0_8_THEN_simple__ETC___d55 =
	      EN_out_ports_0_putNonFullVCs &&
	      out_ports_0_putNonFullVCs_nonFullVCs[0];
      2'd1:
	  IF_outPortFIFOs_1_first__7_EQ_0_8_THEN_simple__ETC___d55 =
	      EN_out_ports_1_putNonFullVCs &&
	      out_ports_1_putNonFullVCs_nonFullVCs[0];
      2'd2:
	  IF_outPortFIFOs_1_first__7_EQ_0_8_THEN_simple__ETC___d55 =
	      EN_out_ports_2_putNonFullVCs &&
	      out_ports_2_putNonFullVCs_nonFullVCs[0];
      2'd3:
	  IF_outPortFIFOs_1_first__7_EQ_0_8_THEN_simple__ETC___d55 =
	      EN_out_ports_3_putNonFullVCs &&
	      out_ports_3_putNonFullVCs_nonFullVCs[0];
    endcase
  end
  always@(outPortFIFOs$first or
	  EN_out_ports_3_putNonFullVCs or
	  out_ports_3_putNonFullVCs_nonFullVCs or
	  EN_out_ports_0_putNonFullVCs or
	  out_ports_0_putNonFullVCs_nonFullVCs or
	  EN_out_ports_1_putNonFullVCs or
	  out_ports_1_putNonFullVCs_nonFullVCs or
	  EN_out_ports_2_putNonFullVCs or
	  out_ports_2_putNonFullVCs_nonFullVCs)
  begin
    case (outPortFIFOs$first)
      2'd0:
	  IF_outPortFIFOs_first__4_EQ_0_5_THEN_simple_cr_ETC___d72 =
	      EN_out_ports_0_putNonFullVCs &&
	      out_ports_0_putNonFullVCs_nonFullVCs[0];
      2'd1:
	  IF_outPortFIFOs_first__4_EQ_0_5_THEN_simple_cr_ETC___d72 =
	      EN_out_ports_1_putNonFullVCs &&
	      out_ports_1_putNonFullVCs_nonFullVCs[0];
      2'd2:
	  IF_outPortFIFOs_first__4_EQ_0_5_THEN_simple_cr_ETC___d72 =
	      EN_out_ports_2_putNonFullVCs &&
	      out_ports_2_putNonFullVCs_nonFullVCs[0];
      2'd3:
	  IF_outPortFIFOs_first__4_EQ_0_5_THEN_simple_cr_ETC___d72 =
	      EN_out_ports_3_putNonFullVCs &&
	      out_ports_3_putNonFullVCs_nonFullVCs[0];
    endcase
  end
  always@(active_in__h25970 or
	  outport_encoder___d545 or
	  hasFlitsToSend_perIn_3$wget or
	  outport_encoder___d548 or
	  hasFlitsToSend_perIn$wget or
	  outport_encoder___d547 or
	  hasFlitsToSend_perIn_1$wget or
	  outport_encoder___d546 or hasFlitsToSend_perIn_2$wget)
  begin
    case (active_in__h25970)
      2'd0:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d314 =
	      outport_encoder___d548[2] && hasFlitsToSend_perIn$wget[36];
      2'd1:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d314 =
	      outport_encoder___d547[2] && hasFlitsToSend_perIn_1$wget[36];
      2'd2:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d314 =
	      outport_encoder___d546[2] && hasFlitsToSend_perIn_2$wget[36];
      2'd3:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d314 =
	      active_in__h25970 != 2'd3 ||
	      outport_encoder___d545[2] && hasFlitsToSend_perIn_3$wget[36];
    endcase
  end
  always@(active_in__h26764 or
	  outport_encoder___d545 or
	  hasFlitsToSend_perIn_3$wget or
	  outport_encoder___d548 or
	  hasFlitsToSend_perIn$wget or
	  outport_encoder___d547 or
	  hasFlitsToSend_perIn_1$wget or
	  outport_encoder___d546 or hasFlitsToSend_perIn_2$wget)
  begin
    case (active_in__h26764)
      2'd0:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d364 =
	      outport_encoder___d548[2] && hasFlitsToSend_perIn$wget[36];
      2'd1:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d364 =
	      outport_encoder___d547[2] && hasFlitsToSend_perIn_1$wget[36];
      2'd2:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d364 =
	      outport_encoder___d546[2] && hasFlitsToSend_perIn_2$wget[36];
      2'd3:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d364 =
	      active_in__h26764 != 2'd3 ||
	      outport_encoder___d545[2] && hasFlitsToSend_perIn_3$wget[36];
    endcase
  end
  always@(active_in__h27558 or
	  outport_encoder___d545 or
	  hasFlitsToSend_perIn_3$wget or
	  outport_encoder___d548 or
	  hasFlitsToSend_perIn$wget or
	  outport_encoder___d547 or
	  hasFlitsToSend_perIn_1$wget or
	  outport_encoder___d546 or hasFlitsToSend_perIn_2$wget)
  begin
    case (active_in__h27558)
      2'd0:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d414 =
	      outport_encoder___d548[2] && hasFlitsToSend_perIn$wget[36];
      2'd1:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d414 =
	      outport_encoder___d547[2] && hasFlitsToSend_perIn_1$wget[36];
      2'd2:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d414 =
	      outport_encoder___d546[2] && hasFlitsToSend_perIn_2$wget[36];
      2'd3:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d414 =
	      active_in__h27558 != 2'd3 ||
	      outport_encoder___d545[2] && hasFlitsToSend_perIn_3$wget[36];
    endcase
  end
  always@(active_in__h25970 or
	  outport_encoder___d545 or
	  hasFlitsToSend_perIn_3$wget or
	  outport_encoder___d548 or
	  hasFlitsToSend_perIn$wget or
	  outport_encoder___d547 or
	  hasFlitsToSend_perIn_1$wget or
	  outport_encoder___d546 or hasFlitsToSend_perIn_2$wget)
  begin
    case (active_in__h25970)
      2'd0:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d579 =
	      !outport_encoder___d548[2] || !hasFlitsToSend_perIn$wget[36];
      2'd1:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d579 =
	      !outport_encoder___d547[2] || !hasFlitsToSend_perIn_1$wget[36];
      2'd2:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d579 =
	      !outport_encoder___d546[2] || !hasFlitsToSend_perIn_2$wget[36];
      2'd3:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d579 =
	      active_in__h25970 == 2'd3 &&
	      (!outport_encoder___d545[2] ||
	       !hasFlitsToSend_perIn_3$wget[36]);
    endcase
  end
  always@(active_in__h26764 or
	  outport_encoder___d545 or
	  hasFlitsToSend_perIn_3$wget or
	  outport_encoder___d548 or
	  hasFlitsToSend_perIn$wget or
	  outport_encoder___d547 or
	  hasFlitsToSend_perIn_1$wget or
	  outport_encoder___d546 or hasFlitsToSend_perIn_2$wget)
  begin
    case (active_in__h26764)
      2'd0:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d580 =
	      !outport_encoder___d548[2] || !hasFlitsToSend_perIn$wget[36];
      2'd1:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d580 =
	      !outport_encoder___d547[2] || !hasFlitsToSend_perIn_1$wget[36];
      2'd2:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d580 =
	      !outport_encoder___d546[2] || !hasFlitsToSend_perIn_2$wget[36];
      2'd3:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d580 =
	      active_in__h26764 == 2'd3 &&
	      (!outport_encoder___d545[2] ||
	       !hasFlitsToSend_perIn_3$wget[36]);
    endcase
  end
  always@(active_in__h27558 or
	  outport_encoder___d545 or
	  hasFlitsToSend_perIn_3$wget or
	  outport_encoder___d548 or
	  hasFlitsToSend_perIn$wget or
	  outport_encoder___d547 or
	  hasFlitsToSend_perIn_1$wget or
	  outport_encoder___d546 or hasFlitsToSend_perIn_2$wget)
  begin
    case (active_in__h27558)
      2'd0:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d581 =
	      !outport_encoder___d548[2] || !hasFlitsToSend_perIn$wget[36];
      2'd1:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d581 =
	      !outport_encoder___d547[2] || !hasFlitsToSend_perIn_1$wget[36];
      2'd2:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d581 =
	      !outport_encoder___d546[2] || !hasFlitsToSend_perIn_2$wget[36];
      2'd3:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d581 =
	      active_in__h27558 == 2'd3 &&
	      (!outport_encoder___d545[2] ||
	       !hasFlitsToSend_perIn_3$wget[36]);
    endcase
  end
  always@(active_in__h25970 or
	  hasFlitsToSend_perIn_3$wget or
	  hasFlitsToSend_perIn$wget or
	  hasFlitsToSend_perIn_1$wget or hasFlitsToSend_perIn_2$wget)
  begin
    case (active_in__h25970)
      2'd0:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d571 =
	      hasFlitsToSend_perIn$wget[35:0];
      2'd1:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d571 =
	      hasFlitsToSend_perIn_1$wget[35:0];
      2'd2:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d571 =
	      hasFlitsToSend_perIn_2$wget[35:0];
      2'd3:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d571 =
	      hasFlitsToSend_perIn_3$wget[35:0];
    endcase
  end
  always@(active_in__h27558 or
	  hasFlitsToSend_perIn_3$wget or
	  hasFlitsToSend_perIn$wget or
	  hasFlitsToSend_perIn_1$wget or hasFlitsToSend_perIn_2$wget)
  begin
    case (active_in__h27558)
      2'd0:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d573 =
	      hasFlitsToSend_perIn$wget[35:0];
      2'd1:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d573 =
	      hasFlitsToSend_perIn_1$wget[35:0];
      2'd2:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d573 =
	      hasFlitsToSend_perIn_2$wget[35:0];
      2'd3:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d573 =
	      hasFlitsToSend_perIn_3$wget[35:0];
    endcase
  end
  always@(active_in__h26764 or
	  hasFlitsToSend_perIn_3$wget or
	  hasFlitsToSend_perIn$wget or
	  hasFlitsToSend_perIn_1$wget or hasFlitsToSend_perIn_2$wget)
  begin
    case (active_in__h26764)
      2'd0:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d572 =
	      hasFlitsToSend_perIn$wget[35:0];
      2'd1:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d572 =
	      hasFlitsToSend_perIn_1$wget[35:0];
      2'd2:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d572 =
	      hasFlitsToSend_perIn_2$wget[35:0];
      2'd3:
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d572 =
	      hasFlitsToSend_perIn_3$wget[35:0];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        inPortVL <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inPortVL_1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inPortVL_2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inPortVL_3 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	lockedVL <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lockedVL_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lockedVL_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lockedVL_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selectedIO_reg_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selectedIO_reg_0_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selectedIO_reg_0_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selectedIO_reg_0_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selectedIO_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selectedIO_reg_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selectedIO_reg_1_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selectedIO_reg_1_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selectedIO_reg_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selectedIO_reg_2_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selectedIO_reg_2_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selectedIO_reg_2_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selectedIO_reg_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selectedIO_reg_3_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selectedIO_reg_3_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selectedIO_reg_3_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (inPortVL$EN) inPortVL <= `BSV_ASSIGNMENT_DELAY inPortVL$D_IN;
	if (inPortVL_1$EN)
	  inPortVL_1 <= `BSV_ASSIGNMENT_DELAY inPortVL_1$D_IN;
	if (inPortVL_2$EN)
	  inPortVL_2 <= `BSV_ASSIGNMENT_DELAY inPortVL_2$D_IN;
	if (inPortVL_3$EN)
	  inPortVL_3 <= `BSV_ASSIGNMENT_DELAY inPortVL_3$D_IN;
	if (lockedVL$EN) lockedVL <= `BSV_ASSIGNMENT_DELAY lockedVL$D_IN;
	if (lockedVL_1$EN)
	  lockedVL_1 <= `BSV_ASSIGNMENT_DELAY lockedVL_1$D_IN;
	if (lockedVL_2$EN)
	  lockedVL_2 <= `BSV_ASSIGNMENT_DELAY lockedVL_2$D_IN;
	if (lockedVL_3$EN)
	  lockedVL_3 <= `BSV_ASSIGNMENT_DELAY lockedVL_3$D_IN;
	if (selectedIO_reg_0$EN)
	  selectedIO_reg_0 <= `BSV_ASSIGNMENT_DELAY selectedIO_reg_0$D_IN;
	if (selectedIO_reg_0_1$EN)
	  selectedIO_reg_0_1 <= `BSV_ASSIGNMENT_DELAY selectedIO_reg_0_1$D_IN;
	if (selectedIO_reg_0_2$EN)
	  selectedIO_reg_0_2 <= `BSV_ASSIGNMENT_DELAY selectedIO_reg_0_2$D_IN;
	if (selectedIO_reg_0_3$EN)
	  selectedIO_reg_0_3 <= `BSV_ASSIGNMENT_DELAY selectedIO_reg_0_3$D_IN;
	if (selectedIO_reg_1$EN)
	  selectedIO_reg_1 <= `BSV_ASSIGNMENT_DELAY selectedIO_reg_1$D_IN;
	if (selectedIO_reg_1_1$EN)
	  selectedIO_reg_1_1 <= `BSV_ASSIGNMENT_DELAY selectedIO_reg_1_1$D_IN;
	if (selectedIO_reg_1_2$EN)
	  selectedIO_reg_1_2 <= `BSV_ASSIGNMENT_DELAY selectedIO_reg_1_2$D_IN;
	if (selectedIO_reg_1_3$EN)
	  selectedIO_reg_1_3 <= `BSV_ASSIGNMENT_DELAY selectedIO_reg_1_3$D_IN;
	if (selectedIO_reg_2$EN)
	  selectedIO_reg_2 <= `BSV_ASSIGNMENT_DELAY selectedIO_reg_2$D_IN;
	if (selectedIO_reg_2_1$EN)
	  selectedIO_reg_2_1 <= `BSV_ASSIGNMENT_DELAY selectedIO_reg_2_1$D_IN;
	if (selectedIO_reg_2_2$EN)
	  selectedIO_reg_2_2 <= `BSV_ASSIGNMENT_DELAY selectedIO_reg_2_2$D_IN;
	if (selectedIO_reg_2_3$EN)
	  selectedIO_reg_2_3 <= `BSV_ASSIGNMENT_DELAY selectedIO_reg_2_3$D_IN;
	if (selectedIO_reg_3$EN)
	  selectedIO_reg_3 <= `BSV_ASSIGNMENT_DELAY selectedIO_reg_3$D_IN;
	if (selectedIO_reg_3_1$EN)
	  selectedIO_reg_3_1 <= `BSV_ASSIGNMENT_DELAY selectedIO_reg_3_1$D_IN;
	if (selectedIO_reg_3_2$EN)
	  selectedIO_reg_3_2 <= `BSV_ASSIGNMENT_DELAY selectedIO_reg_3_2$D_IN;
	if (selectedIO_reg_3_3$EN)
	  selectedIO_reg_3_3 <= `BSV_ASSIGNMENT_DELAY selectedIO_reg_3_3$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    inPortVL = 2'h2;
    inPortVL_1 = 2'h2;
    inPortVL_2 = 2'h2;
    inPortVL_3 = 2'h2;
    lockedVL = 1'h0;
    lockedVL_1 = 1'h0;
    lockedVL_2 = 1'h0;
    lockedVL_3 = 1'h0;
    selectedIO_reg_0 = 1'h0;
    selectedIO_reg_0_1 = 1'h0;
    selectedIO_reg_0_2 = 1'h0;
    selectedIO_reg_0_3 = 1'h0;
    selectedIO_reg_1 = 1'h0;
    selectedIO_reg_1_1 = 1'h0;
    selectedIO_reg_1_2 = 1'h0;
    selectedIO_reg_1_3 = 1'h0;
    selectedIO_reg_2 = 1'h0;
    selectedIO_reg_2_1 = 1'h0;
    selectedIO_reg_2_2 = 1'h0;
    selectedIO_reg_2_3 = 1'h0;
    selectedIO_reg_3 = 1'h0;
    selectedIO_reg_3_1 = 1'h0;
    selectedIO_reg_3_2 = 1'h0;
    selectedIO_reg_3_3 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N) if (EN_out_ports_0_putNonFullVCs) $write("");
    if (RST_N) if (EN_out_ports_0_putNonFullVCs) $write("");
    if (RST_N) if (EN_out_ports_1_putNonFullVCs) $write("");
    if (RST_N) if (EN_out_ports_1_putNonFullVCs) $write("");
    if (RST_N) if (EN_out_ports_2_putNonFullVCs) $write("");
    if (RST_N) if (EN_out_ports_2_putNonFullVCs) $write("");
    if (RST_N) if (EN_out_ports_3_putNonFullVCs) $write("");
    if (RST_N) if (EN_out_ports_3_putNonFullVCs) $write("");
    if (RST_N)
      if (EN_out_ports_0_getFlit &&
	  IF_outport_encoder_65_BIT_2_66_THEN_outport_en_ETC___d519 &&
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_NOT_out_ETC___d578)
	$display("Dynamic assertion failed: \"IQRouterSimple.bsv\", line 619, column 47\nOutput selected invalid flit!");
    if (RST_N)
      if (EN_out_ports_0_getFlit &&
	  IF_outport_encoder_65_BIT_2_66_THEN_outport_en_ETC___d519 &&
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_NOT_out_ETC___d578)
	$finish(32'd0);
    if (RST_N)
      if (EN_out_ports_1_getFlit &&
	  IF_outport_encoder_65_BIT_2_66_THEN_outport_en_ETC___d527 &&
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d579)
	$display("Dynamic assertion failed: \"IQRouterSimple.bsv\", line 619, column 47\nOutput selected invalid flit!");
    if (RST_N)
      if (EN_out_ports_1_getFlit &&
	  IF_outport_encoder_65_BIT_2_66_THEN_outport_en_ETC___d527 &&
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d579)
	$finish(32'd0);
    if (RST_N)
      if (EN_out_ports_2_getFlit &&
	  IF_outport_encoder_65_BIT_2_66_THEN_outport_en_ETC___d529 &&
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d580)
	$display("Dynamic assertion failed: \"IQRouterSimple.bsv\", line 619, column 47\nOutput selected invalid flit!");
    if (RST_N)
      if (EN_out_ports_2_getFlit &&
	  IF_outport_encoder_65_BIT_2_66_THEN_outport_en_ETC___d529 &&
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d580)
	$finish(32'd0);
    if (RST_N)
      if (EN_out_ports_3_getFlit &&
	  IF_outport_encoder_65_BIT_2_66_THEN_outport_en_ETC___d531 &&
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d581)
	$display("Dynamic assertion failed: \"IQRouterSimple.bsv\", line 619, column 47\nOutput selected invalid flit!");
    if (RST_N)
      if (EN_out_ports_3_getFlit &&
	  IF_outport_encoder_65_BIT_2_66_THEN_outport_en_ETC___d531 &&
	  IF_IF_outport_encoder_65_BIT_2_66_THEN_IF_outp_ETC___d581)
	$finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkIQRouterCoreSimple

